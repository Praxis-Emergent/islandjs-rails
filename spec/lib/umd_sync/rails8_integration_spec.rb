require 'spec_helper'

RSpec.describe 'Rails 8 Integration' do
  let(:temp_dir) { create_temp_dir }
  
  before do
    mock_rails_root(temp_dir)
    create_temp_package_json(temp_dir, {
      'react' => '^18.3.1',
      'react-dom' => '^18.3.1'
    })
  end

  describe 'Rails 8 Asset Pipeline Integration' do
    it 'works with Rails 8 asset pipeline structure' do
      # Rails 8 uses app/assets/builds for compiled assets
      builds_dir = File.join(temp_dir, 'app', 'assets', 'builds')
      FileUtils.mkdir_p(builds_dir)
      
      # Test UMD partials creation
      UmdSync.init!
      partials_dir = File.join(temp_dir, 'app', 'views', 'shared', 'umd')
      
      expect(Dir.exist?(partials_dir)).to be true
    end
    
    it 'generates Rails 8 compatible webpack config' do
      UmdSync.init!
      webpack_path = File.join(temp_dir, 'webpack.config.js')
      
      expect(File.exist?(webpack_path)).to be true
      
      content = File.read(webpack_path)
      expect(content).to include('umd_sync')
      expect(content).to include('public') # UMD Sync asset location
    end
  end

  describe 'Rails 8 Hotwire Integration' do
    let(:view_context) {
      Class.new do
        include UmdSync::RailsHelpers
        include ActionView::Helpers::TagHelper
        
        def asset_path(path)
          "/assets/#{path}"
        end
        
        def render(options)
          '<script>UMD content</script>'
        end
        
        private
        def html_escape(value)
          ERB::Util.html_escape(value.to_s)
        end
      end.new
    }
    
    it 'generates Turbo-compatible React components' do
      result = view_context.react_component('TestComponent', { id: 123 })
      
      # Should include Turbo event listeners
      expect(result).to include("addEventListener('turbo:load'")
      expect(result).to include("addEventListener('turbo:before-cache'")
      expect(result).to include("addEventListener('turbo:render'")
      
      # Should use Rails 8 compatible mounting
      expect(result).to include('window.ReactDOM.createRoot')
      expect(result).to include('container._reactRoot')
    end
    
    it 'uses modern namespace convention' do
      result = view_context.react_component('TestComponent', {})
      
      expect(result).to include('window.umd_sync.TestComponent')
    end
  end

  describe 'Rails 8 Performance Optimizations' do
    it 'minimizes asset pipeline integration' do
      # UMD Sync should not interfere with Rails 8 asset optimizations
      webpack_path = File.join(temp_dir, 'webpack.config.js')
      create_temp_webpack_config(temp_dir)
      
      UmdSync.core.update_webpack_externals
      
      content = File.read(webpack_path)
      
      # Should preserve Rails 8 optimizations
      expect(content).to include('module.exports')
      expect(content).to include('externals')
      expect(content).not_to include('react') # No externals added yet
    end
  end

  describe 'Rails 8 Deployment Compatibility' do
    it 'works with Rails 8 deployment patterns' do
      # Test that UMD files are properly structured for Rails 8 deployments
      partials_dir = File.join(temp_dir, 'app', 'views', 'shared', 'umd')
      
      UmdSync.core.create_partial_file('react', 'console.log("React");', 'React')
      
      partial_path = File.join(partials_dir, '_react.html.erb')
      expect(File.exist?(partial_path)).to be true
      
      content = File.read(partial_path)
      expect(content).to include('<script type="text/javascript">')
      expect(content).to include('Generated by UmdSync')
      expect(content).to include('Global: React')
    end
  end
end 