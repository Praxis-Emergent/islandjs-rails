<div class="max-w-4xl mx-auto p-8">
  <h1 class="text-3xl font-bold mb-6">🏝️ IslandJS Rails + Turbo Cache Demo</h1>
  
  <div class="bg-gray-50 rounded-lg p-6 mb-6">
    <h2 class="text-xl font-semibold mb-4">React Component Island with Turbo Cache</h2>
    <p class="text-gray-600 mb-4">This demonstrates a React component that persists state across Turbo navigation.</p>
    
    <!-- React Component Island -->
    <div id="hello-world-demo" class="border-2 border-dashed border-blue-300 rounded-lg p-4 bg-white">
      <%= react_component('HelloWorld', { 
        message: 'Hello from IslandJS Rails!', 
        count: 5,
        customMessage: 'Initial custom message'
      }) %>
    </div>
  </div>

  <div class="bg-blue-50 rounded-lg p-6 mb-6">
    <h3 class="text-lg font-semibold mb-3">🔄 Test Turbo Cache Behavior:</h3>
    <ol class="list-decimal list-inside space-y-2 text-sm">
      <li>Click the counter button and change the message above</li>
      <li>Navigate to <%= link_to "Home", "/islandjs", class: "text-blue-600 hover:text-blue-800 underline" %> and back</li>
      <li>Notice your count and custom message are preserved! 🎉</li>
    </ol>
  </div>
  
  <div class="prose max-w-none">
    <h3 class="text-lg font-semibold mb-3">How the Turbo-Cache Pattern Works:</h3>
    <div class="bg-white rounded-lg p-4 border space-y-3 text-sm">
      <div class="flex items-start space-x-3">
        <span class="bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs font-medium">1. ERB</span>
        <div>
          <code class="bg-gray-100 px-2 py-1 rounded">react_component('HelloWorld', { message: '...', count: 5 })</code>
          <p class="text-gray-600 mt-1">Rails helper receives full props object</p>
        </div>
      </div>
      
      <div class="flex items-start space-x-3">
        <span class="bg-green-100 text-green-800 px-2 py-1 rounded text-xs font-medium">2. HTML</span>
        <div>
          <code class="bg-gray-100 px-2 py-1 rounded">&lt;div data-initial-state='{"message":"...","count":5}' id="react-hello-world-abc123"&gt;</code>
          <p class="text-gray-600 mt-1">Props stored as JSON in data attribute, secure random ID generated</p>
        </div>
      </div>
      
      <div class="flex items-start space-x-3">
        <span class="bg-purple-100 text-purple-800 px-2 py-1 rounded text-xs font-medium">3. React</span>
        <div>
          <code class="bg-gray-100 px-2 py-1 rounded">HelloWorld({ containerId: "react-hello-world-abc123" })</code>
          <p class="text-gray-600 mt-1">Component receives only the container ID as prop</p>
        </div>
      </div>
      
      <div class="flex items-start space-x-3">
        <span class="bg-yellow-100 text-yellow-800 px-2 py-1 rounded text-xs font-medium">4. Init</span>
        <div>
          <code class="bg-gray-100 px-2 py-1 rounded">getInitialState(containerId)</code>
          <p class="text-gray-600 mt-1">Component reads initial props from div's data-initial-state</p>
        </div>
      </div>
      
      <div class="flex items-start space-x-3">
        <span class="bg-red-100 text-red-800 px-2 py-1 rounded text-xs font-medium">5. Cache</span>
        <div>
          <code class="bg-gray-100 px-2 py-1 rounded">useTurboCache(containerId, currentState)</code>
          <p class="text-gray-600 mt-1">On turbo:before-cache, current state is serialized back to div</p>
        </div>
      </div>
    </div>
    
    <div class="mt-6">
      <p><%= link_to "← Back to Home", "/islandjs", class: "text-blue-600 hover:text-blue-800" %></p>
    </div>
  </div>
</div> 